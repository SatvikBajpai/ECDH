#!/usr/bin/env python3
"""
ECDH Comparison Script
This script runs both Python and OpenSSL implementations of ECDH
and compares their results using the same keys.
"""

import subprocess
import sys
import os

def print_section(title):
    """Print a formatted section header"""
    print("\n" + "=" * 70)
    print(f"  {title}")
    print("=" * 70 + "\n")

def cleanup_files():
    """Remove any existing key files"""
    files = [
        'alice_private.pem', 'alice_public.pem',
        'bob_private.pem', 'bob_public.pem',
        'alice_shared.bin', 'bob_shared.bin',
        'alice_shared.hex', 'bob_shared.hex',
        'alice_derived.hex', 'bob_derived.hex'
    ]
    for f in files:
        if os.path.exists(f):
            os.remove(f)

def run_python_ecdh():
    """Run the Python ECDH implementation"""
    print_section("Running Python ECDH Implementation")
    try:
        result = subprocess.run(
            ['python', 'ECDH_with_fixed_keys.py'],
            capture_output=True,
            text=True,
            check=True
        )
        print(result.stdout)
        if result.stderr:
            print("Errors/Warnings:", result.stderr)
        return True
    except subprocess.CalledProcessError as e:
        print(f"Error running Python ECDH: {e}")
        print(e.stdout)
        print(e.stderr)
        return False

def run_openssl_ecdh():
    """Run the OpenSSL ECDH implementation"""
    print_section("Running OpenSSL ECDH Implementation")
    try:
        result = subprocess.run(
            ['bash', 'ECDH_openssl.sh'],
            capture_output=True,
            text=True,
            check=True
        )
        print(result.stdout)
        if result.stderr:
            print("Errors/Warnings:", result.stderr)
        return True
    except subprocess.CalledProcessError as e:
        print(f"Error running OpenSSL ECDH: {e}")
        print(e.stdout)
        print(e.stderr)
        return False

def compare_results():
    """Compare the results from both implementations"""
    print_section("Comparing Results Between Python and OpenSSL")

    results = {
        'alice_shared': {'match': False, 'python': None, 'openssl': None},
        'bob_shared': {'match': False, 'python': None, 'openssl': None},
        'alice_derived': {'match': False, 'python': None, 'openssl': None},
        'bob_derived': {'match': False, 'python': None, 'openssl': None}
    }

    files_to_check = ['alice_shared.hex', 'bob_shared.hex', 'alice_derived.hex', 'bob_derived.hex']

    # Check if all files exist
    missing_files = [f for f in files_to_check if not os.path.exists(f)]
    if missing_files:
        print(f"ERROR: Missing files: {', '.join(missing_files)}")
        return False

    # Read and compare files
    all_match = True
    for filename in files_to_check:
        key = filename.replace('.hex', '')

        with open(filename, 'r') as f:
            content = f.read().strip()

        results[key]['value'] = content

        print(f"\n{filename}:")
        print(f"  Value: {content[:64]}...")
        print(f"  Length: {len(content)} hex characters ({len(content)//2} bytes)")

    # For comparison, we need to run both with the same keys
    # The first run (Python) generates keys, the second run (OpenSSL) uses them
    print("\n" + "-" * 70)
    print("COMPARISON SUMMARY")
    print("-" * 70)

    # Compare Alice's and Bob's shared secrets
    if results['alice_shared']['value'] == results['bob_shared']['value']:
        print("✓ Alice and Bob computed the SAME shared secret")
    else:
        print("✗ Alice and Bob computed DIFFERENT shared secrets")
        all_match = False

    # Compare Alice's and Bob's derived keys
    if results['alice_derived']['value'] == results['bob_derived']['value']:
        print("✓ Alice and Bob derived the SAME final key")
    else:
        print("✗ Alice and Bob derived DIFFERENT final keys")
        all_match = False

    return all_match

def run_cross_comparison():
    """Run a comprehensive cross-comparison test"""
    print_section("Cross-Implementation Comparison Test")
    print("This test uses keys generated by Python and verifies OpenSSL produces the same results.\n")

    # Step 1: Clean up
    cleanup_files()

    # Step 2: Run Python implementation first (generates keys)
    if not run_python_ecdh():
        print("Failed to run Python ECDH")
        return False

    # Save Python results
    python_results = {}
    for key in ['alice_shared.hex', 'bob_shared.hex', 'alice_derived.hex', 'bob_derived.hex']:
        with open(key, 'r') as f:
            python_results[key] = f.read().strip()

    # Step 3: Run OpenSSL implementation (uses the same keys)
    if not run_openssl_ecdh():
        print("Failed to run OpenSSL ECDH")
        return False

    # Step 4: Compare results
    print_section("Cross-Implementation Verification")

    openssl_results = {}
    for key in ['alice_shared.hex', 'bob_shared.hex', 'alice_derived.hex', 'bob_derived.hex']:
        with open(key, 'r') as f:
            openssl_results[key] = f.read().strip()

    all_match = True

    print("Comparing Python vs OpenSSL results:\n")

    for key in ['alice_shared.hex', 'bob_shared.hex']:
        person = "Alice" if "alice" in key else "Bob"
        if python_results[key] == openssl_results[key]:
            print(f"✓ {person}'s shared secret MATCHES between Python and OpenSSL")
            print(f"  Value: {python_results[key][:64]}...")
        else:
            print(f"✗ {person}'s shared secret DIFFERS between Python and OpenSSL")
            print(f"  Python:  {python_results[key][:64]}...")
            print(f"  OpenSSL: {openssl_results[key][:64]}...")
            all_match = False
        print()

    for key in ['alice_derived.hex', 'bob_derived.hex']:
        person = "Alice" if "alice" in key else "Bob"
        if python_results[key] == openssl_results[key]:
            print(f"✓ {person}'s derived key MATCHES between Python and OpenSSL")
            print(f"  Value: {python_results[key][:64]}...")
        else:
            print(f"✗ {person}'s derived key DIFFERS between Python and OpenSSL")
            print(f"  Python:  {python_results[key][:64]}...")
            print(f"  OpenSSL: {openssl_results[key][:64]}...")
            all_match = False
        print()

    print("-" * 70)
    if all_match:
        print("✓✓✓ SUCCESS: Python and OpenSSL implementations produce IDENTICAL results!")
    else:
        print("✗✗✗ FAILURE: Python and OpenSSL implementations produce DIFFERENT results!")
    print("-" * 70)

    return all_match

def main():
    """Main function"""
    print("=" * 70)
    print("  ECDH Implementation Comparison")
    print("  Python (cryptography) vs OpenSSL")
    print("=" * 70)

    # Check if required files exist
    if not os.path.exists('ECDH_with_fixed_keys.py'):
        print("ERROR: ECDH_with_fixed_keys.py not found")
        sys.exit(1)

    if not os.path.exists('ECDH_openssl.sh'):
        print("ERROR: ECDH_openssl.sh not found")
        sys.exit(1)

    # Run the cross-comparison test
    success = run_cross_comparison()

    # Clean up
    print_section("Cleanup")
    print("Generated files have been kept for inspection.")
    print("Files: alice/bob _private.pem, _public.pem, _shared.hex, _derived.hex")

    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
